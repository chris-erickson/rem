{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["#!/usr/bin/env node\n'use strict';\n\nrequire('instapromise');\n\nconst path = require('path');\nconst fs = require('fs');\n\nasync function mainAsync() {\n  let yargs = require('yargs')\n    .usage('Usage: $0 <command> [options]')\n    .command('init', 'Initializes the current directory for a project that supports native modules')\n    .command('podfile-fragment', 'Outputs a code fragment to be evaluated inline within a Podfile')\n    .options('d', {\n      alias: 'directory',\n      describe: 'Root directory of the JS project, relative to the current working directory. Use with podfile-fragment.',\n      default: '',\n      type: 'string',\n    })\n    .help('h')\n    .alias('h', 'help');\n\n  let argv = yargs.argv;\n  let command = argv._[0];\n\n  switch (command) {\n    case 'init': {\n      const PodfileEditor = require('./PodfileEditor');\n      const PodfileLoader = require('./PodfileLoader');\n      const Settings = require('./Settings');\n\n      try {\n        await fs.promise.access('package.json');\n      } catch (error) {\n        console.error('package.json not found; run \"rem init\" in the root directory of your JS project');\n        process.exit(1);\n      }\n\n      let settings = await Settings.loadAsync();\n      let podfileLoader = new PodfileLoader(settings);\n      let podfileEditor = new PodfileEditor(settings);\n      let podfile = await podfileLoader.readEnsuredAsync();\n      if (podfileEditor.hasREMSection(podfile)) {\n        console.log(\"The project's Podfile is already set up with REM.\");\n      } else {\n        podfile = podfileEditor.addREMSection(podfile);\n        await podfileLoader.writeAsync(podfile);\n      }\n      break;\n    }\n    case 'podfile-fragment': {\n      const PodfileFragmentGenerator = require('./PodfileFragmentGenerator');\n\n      let fragment = await PodfileFragmentGenerator.podfileFragmentAsync();\n      console.log(fragment);\n      break;\n    }\n    case null: {\n      console.error(yargs.help());\n      process.exit(1);\n      break;\n    }\n    default: {\n      console.error('Unknown command: %s\\n%s', command, yargs.help());\n      process.exit(1);\n      break;\n    }\n  }\n}\n\nif (module === require.main) {\n  mainAsync().catch((error) => {\n    console.error(error.stack);\n    process.exit(1);\n  });\n}\n"],"sourceRoot":"/source/"}