{"version":3,"sources":["PodfileFragmentGenerator.coffee"],"names":[],"mappings":"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","file":"PodfileFragmentGenerator.js","sourceRoot":"/source/","sourcesContent":["#!/usr/bin/env coffee\n__doc__ = \"\"\"\nGenerates a fragment of a Podfile on the fly that lists\nall the dependencies needed by the nativePackages under\nnode_modules\n\n\"\"\"\n\nassert = require 'assert'\nco = require 'co'\nfs = require 'fs'\ninstapromise = require 'instapromise'\n{\n  isString\n} = require 'lodash-node'\npath = require 'path'\nutil = require 'util'\n\nfindNativePackagesAsync = co.wrap (dir='.') ->\n  \"\"\"Finds all the React Native modules from a given directory\"\"\"\n\n  foundModules = []\n\n  pkg = yield jsonAsync path.join dir, 'package.json'\n  if pkg.nativePackage?\n    foundModules.push {\n      path: path.relative '.', dir\n      name: pkg.name\n      version: pkg.version\n      nativePackage: pkg.nativePackage\n      pkg\n    }\n\n  node_modules = path.join dir, 'node_modules'\n\n  if fs.existsSync node_modules # N.B. Watch out for `fs.exists` -- it doesn't conform to the (err, result) protocol\n    awaitables = []\n    for mod in yield fs.promise.readdir node_modules\n      unless mod[0] is '.' # Ignore hidden files/dirs like '.bin'\n        awaitables.push findNativePackagesAsync path.join node_modules, mod\n\n    foundModules.concat (yield awaitables)...\n  else\n    foundModules\n\nrubyEscapeString = (s) ->\n  \"\"\"Escapes a string for Ruby (for use in Podfiles)\"\"\"\n\n  # This is a little bit of a hack but it should be correct\n  assert isString s\n  util.inspect s\n\njsonAsync = co.wrap (filepath) ->\n  \"\"\"Returns the JSON object from a given JSON file asynchronously\"\"\"\n\n  json = yield fs.promise.readFile filepath, 'utf8'\n  try\n    JSON.parse json\n  catch e\n    throw new Error \"#{ util.inspect e } in #{ path.resolve filepath }\"\n\npodfileFragmentAsync = co.wrap (dir='.') ->\n  \"\"\"Returns the text of the Podfile we use for Rem\"\"\"\n\n  nativePackages = yield findNativePackagesAsync dir\n  podspecs = []\n  for np in nativePackages\n    if np.nativePackage.podspec?\n      podspecs.push [np.name, path.join np.path, np.nativePackage.podspec]\n    else\n      defaultPodspec = path.join np.path, \"#{ np.name }.podspec\"\n      if fs.existsSync defaultPodspec\n        podspecs.push [np.name, defaultPodspec]\n\n  pkg = yield jsonAsync path.join dir, 'package.json'\n  reactNativeApp = pkg.reactNativeApp\n  reactNativePath = reactNativeApp?.reactNativePath ? 'node_modules/react-native'\n\n  \"\"\"\n  # Generated by rem for #{ pkg.name }\n  REACT_NATIVE_PATH = #{ rubyEscapeString reactNativePath }\n  pod 'React', :path => REACT_NATIVE_PATH\n  pod 'React/RCTImage', :path => REACT_NATIVE_PATH\n  pod 'React/RCTText', :path => REACT_NATIVE_PATH\n  #{(\"pod #{ rubyEscapeString name }, :path => #{ rubyEscapeString podspecPath }\\n\" for [name, podspecPath] in podspecs).join ''}\n  \"\"\"\n\nmodule.exports = {\n  findNativePackagesAsync\n  podfileFragmentAsync\n  jsonAsync\n}\n"]}