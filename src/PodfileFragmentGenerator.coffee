#!/usr/bin/env coffee
__doc__ = """
Generates a fragment of a Podfile on the fly that lists
all the dependencies needed by the nativePackages under
node_modules

"""

assert = require 'assert'
co = require 'co'
fs = require 'fs'
instapromise = require 'instapromise'
{
  isString
} = require 'lodash-node'
path = require 'path'
util = require 'util'

findNativePackagesAsync = co.wrap (dir='.') ->
  """Finds all the React Native modules from a given directory"""

  foundModules = []

  pkg = yield jsonAsync path.join dir, 'package.json'
  if pkg.nativePackage?
    foundModules.push {
      path: path.relative '.', dir
      name: pkg.name
      version: pkg.version
      nativePackage: pkg.nativePackage
      pkg
    }

  node_modules = path.join dir, 'node_modules'

  if fs.existsSync node_modules # N.B. Watch out for `fs.exists` -- it doesn't conform to the (err, result) protocol
    awaitables = []
    for mod in yield fs.promise.readdir node_modules
      unless mod[0] is '.' # Ignore hidden files/dirs like '.bin'
        awaitables.push findNativePackagesAsync path.join node_modules, mod

    foundModules.concat (yield awaitables)...
  else
    foundModules

rubyEscapeString = (s) ->
  """Escapes a string for Ruby (for use in Podfiles)"""

  # This is a little bit of a hack but it should be correct
  assert isString s
  util.inspect s

jsonAsync = co.wrap (filepath) ->
  """Returns the JSON object from a given JSON file asynchronously"""

  json = yield fs.promise.readFile filepath, 'utf8'
  try
    JSON.parse json
  catch e
    throw new Error "#{ util.inspect e } in #{ path.resolve filepath }"

podfileFragmentAsync = co.wrap (dir='.') ->
  """Returns the text of the Podfile we use for Rem"""

  nativePackages = yield findNativePackagesAsync dir
  podspecs = []
  for np in nativePackages
    if np.nativePackage.podspec?
      podspecs.push [np.name, path.join np.path, np.nativePackage.podspec]
    else if np.name is 'react-native'
      podspecs.push [np.name, path.join np.path, 'React.podspec']
    else
      defaultPodspec = path.join np.path, "#{ np.name }.podspec"
      if fs.existsSync defaultPodspec
        podspecs.push [np.name, defaultPodspec]

  pkg = yield jsonAsync path.join dir, 'package.json'
  reactNativeApp = pkg.reactNativeApp
  reactNativePath = reactNativeApp?.reactNativePath ? 'node_modules/react-native'

  """
  # Generated by rem for #{ pkg.name }
  #{("pod #{ rubyEscapeString name }, :path => #{ rubyEscapeString podspecPath }\n" for [name, podspecPath] in podspecs).join ''}
  """

module.exports = {
  findNativePackagesAsync
  podfileFragmentAsync
  jsonAsync
}
